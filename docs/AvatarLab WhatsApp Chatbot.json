{
  "name": "AvatarLab WhatsApp Chatbot",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        704,
        -400
      ],
      "id": "ce5cdfef-9847-45fd-824c-2059dbf0a91d",
      "name": "When chat message received",
      "webhookId": "8488767b-e0b4-4e63-a7dc-88fdff63a825"
    },
    {
      "parameters": {
        "url": "https://xatrtqdgghanwdujyhkq.supabase.co/functions/v1/avatar-config?avatar_id=9a567d58-cb5b-497d-869a-d6a8d61a8b4e",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhhdHJ0cWRnZ2hhbndkdWp5aGtxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg5NjE1MzEsImV4cCI6MjA3NDUzNzUzMX0.sniz2dGyadAa3BvZJ2Omi6thtVWuqMjTFFdM1H_zWAA"
            },
            {
              "name": "x-api-key",
              "value": "pk_live_58b623706a553414cf54529e0f09415a2195299094e6dde3885013a8ed0e3ceb"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3216,
        -384
      ],
      "id": "470e5fad-bcd0-40d8-ba74-815aa773ff4c",
      "name": "get_config"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Message Processor with Better Session Management\nconst inputData = $input.first().json;\n\n// Extract message details\nlet userMessage = '';\nlet userId = '';\nlet phone = '';\nlet messageType = 'text';\n\n// Handle different input formats\nif (inputData.chatInput) {\n  userMessage = inputData.chatInput;\n  userId = inputData.contact?.id || inputData.userId || 'anonymous';\n  phone = inputData.contact?.phone || inputData.phone || '';\n} else if (inputData.message) {\n  userMessage = inputData.message.content || inputData.message;\n  messageType = inputData.message.type || 'text';\n  userId = inputData.contact?.id || 'anonymous';\n  phone = inputData.contact?.phone || '';\n}\n\n// Clean and validate inputs\nuserMessage = String(userMessage || '').trim();\nuserId = String(userId || 'anonymous');\nphone = String(phone || '').replace(/\\D/g, ''); // Remove non-digits from phone\n\n// Use phone as primary identifier, fallback to userId if no phone\nconst primaryId = phone || userId || 'anonymous';\n\n// Generate session ID - Daily sessions (kept for backward compatibility)\nconst today = new Date().toISOString().split('T')[0];\nconst sessionId = `${primaryId}_${today}`;\n\n// Generate unique conversation ID with timestamp for precise ordering\nconst now = new Date();\nconst timestamp = now.getTime();\nconst conversationId = `conv_${timestamp}_${Math.random().toString(36).substr(2, 9)}`;\n\n// Create a message ID that includes timestamp for sorting\nconst messageId = `msg_${timestamp}_${primaryId}`;\n\n// Calculate message number for today (for context)\nconst todayStart = new Date();\ntodayStart.setHours(0, 0, 0, 0);\nconst messageTimestamp = now.getTime();\n\nreturn {\n  json: {\n    // Core message data\n    userMessage: userMessage,\n    userId: userId,\n    phone: phone,\n    primaryId: primaryId,\n    messageType: messageType,\n    sessionId: sessionId,\n    conversationId: conversationId,\n    messageId: messageId,\n    \n    // Timestamp data for proper ordering\n    timestamp: now.toISOString(),\n    timestampMillis: timestamp,\n    date: today,\n    time: now.toTimeString().split(' ')[0], // HH:MM:SS\n    \n    // Metadata\n    hasMessage: !!userMessage,\n    hasPhone: !!phone,\n    \n    // For AI Agent context with time info\n    aiContext: {\n      user_phone: phone,\n      primary_id: primaryId,\n      current_message: userMessage,\n      session_id: sessionId,\n      message_timestamp: now.toISOString(),\n      conversation_id: conversationId,\n      message_id: messageId,\n      time_of_day: now.getHours() < 12 ? 'morning' : \n                   now.getHours() < 17 ? 'afternoon' : \n                   now.getHours() < 20 ? 'evening' : 'night'\n    },\n    \n    // Original data for debugging\n    originalData: inputData\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2192,
        -384
      ],
      "id": "0d6366ee-b119-4257-b8bd-33f555c4eeae",
      "name": "Message Processor"
    },
    {
      "parameters": {
        "url": "={{ $json.mediaUrl }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1424,
        -608
      ],
      "id": "1c918a29-0bf8-49d4-8c30-41bebdb0c604",
      "name": "Get Audio"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data\nconst inputData = $input.first().json;\n\n// Create a deep copy of the input data\nconst modifiedData = JSON.parse(JSON.stringify(inputData));\n\n// Function to replace localhost URL with bot.creatiqai.com\nfunction replaceMediaUrl(url) {\n  if (url && url.includes('http://localhost:9000')) {\n    return url.replace('http://localhost:9000', 'https://bot.creatiqai.com');\n  }\n  return url;\n}\n\n// Replace media URL if it exists\nif (modifiedData.media && modifiedData.media.url) {\n  modifiedData.media.url = replaceMediaUrl(modifiedData.media.url);\n}\n\n// Also add a direct access field for convenience\nconst mediaUrl = modifiedData.media ? modifiedData.media.url : null;\nconst mediaType = modifiedData.media ? modifiedData.media.type : null;\n\n// Return the modified data with additional fields for easy access\nreturn [\n{\n  ...modifiedData,\n  // Add convenient access fields\n  mediaUrl: mediaUrl,\n  mediaType: mediaType,\n  originalUrl: inputData.media ? inputData.media.url : null, // Keep original for reference\n  // Add message content for easy access\n  messageContent: inputData.message ? inputData.message.content : null,\n  messageType: inputData.messageType || null\n}\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        928,
        -400
      ],
      "id": "a448c772-cdfa-4ed5-9558-13293181dfcf",
      "name": "Code5"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "373ad437-deba-4536-9b28-8504ad114bd2",
              "leftValue": "={{ $json.message.type }}",
              "rightValue": "audio",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1136,
        -400
      ],
      "id": "6747411a-304f-4818-ab75-d59e6fc6441d",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Format Output - Handle both audio transcription and direct text with language detection\nconst inputData = $input.first().json;\nlet chatInput = '';\nlet messageSource = '';\nlet phoneNumber = '';\nlet detectedLanguage = 'unknown';\n\nconsole.log('=== Enhanced Format Output Debug ===');\nconsole.log('Input data keys:', Object.keys(inputData));\n\n// Simple language detection function\nfunction detectLanguage(text) {\n  if (!text) return 'unknown';\n  \n  // Check for Chinese characters\n  const chineseRegex = /[\\u4e00-\\u9fff\\u3400-\\u4dbf\\uf900-\\ufaff]/;\n  if (chineseRegex.test(text)) {\n    return 'chinese';\n  }\n  \n  // Check for Malay/Indonesian common words\n  const malayWords = ['saya', 'anda', 'dengan', 'untuk', 'adalah', 'yang', 'ini', 'itu', 'pada', 'dari'];\n  const lowerText = text.toLowerCase();\n  if (malayWords.some(word => lowerText.includes(word))) {\n    return 'malay';\n  }\n  \n  // Default to English if no specific patterns found\n  return 'english';\n}\n\n// Determine the source and extract appropriate data\nif (inputData.text && typeof inputData.text === 'string') {\n  // This is from OpenAI5 (audio transcription)\n  chatInput = inputData.text.trim();\n  messageSource = 'audio_transcribed';\n  detectedLanguage = detectLanguage(chatInput);\n  \n  console.log('Source: Audio transcription');\n  console.log('Transcribed text:', chatInput);\n  console.log('Detected language:', detectedLanguage);\n  \n  // For audio messages, get contact info from the original trigger\n  try {\n    const triggerData = $('When chat message received').first().json;\n    phoneNumber = triggerData.contact?.phone || triggerData.phone || '';\n    console.log('Phone from trigger (audio):', phoneNumber);\n  } catch (e) {\n    console.log('Could not access trigger data for audio:', e.message);\n    phoneNumber = '';\n  }\n  \n} else if (inputData.chatInput) {\n  // This is from Code5 (direct text message)\n  chatInput = inputData.chatInput;\n  messageSource = inputData.messageSource || 'text';\n  phoneNumber = inputData.phone || '';\n  detectedLanguage = detectLanguage(chatInput);\n  \n  console.log('Source: Direct text from Code5');\n  console.log('Detected language:', detectedLanguage);\n  \n} else {\n  // Fallback extraction\n  console.log('Using fallback extraction');\n  \n  if (inputData.message?.content) {\n    chatInput = inputData.message.content;\n  } else if (inputData.contact?.message) {\n    chatInput = inputData.contact.message;\n  } else if (typeof inputData === 'string') {\n    chatInput = inputData;\n  } else {\n    try {\n      const triggerData = $('When chat message received').first().json;\n      chatInput = triggerData.chatInput || triggerData.message?.content || 'Hello';\n      phoneNumber = triggerData.contact?.phone || triggerData.phone || '';\n      console.log('Using trigger data as fallback');\n    } catch (e) {\n      console.log('Could not access trigger data:', e.message);\n      chatInput = 'Hello';\n    }\n  }\n  \n  messageSource = 'fallback';\n  detectedLanguage = detectLanguage(chatInput);\n}\n\n// Clean up the message\nchatInput = String(chatInput || 'Hello').trim();\n\n// If we still don't have phone number, try to get it from trigger\nif (!phoneNumber) {\n  try {\n    const triggerData = $('When chat message received').first().json;\n    phoneNumber = triggerData.contact?.phone || triggerData.phone || '';\n    console.log('Phone from trigger (fallback):', phoneNumber);\n  } catch (e) {\n    console.log('Could not get phone from trigger:', e.message);\n    phoneNumber = '';\n  }\n}\n\n// Generate contact info\nconst contact = {\n  id: phoneNumber ? phoneNumber.replace(/\\D/g, '') : 'anonymous',\n  phone: phoneNumber\n};\n\nconsole.log('=== Enhanced Format Output Results ===');\nconsole.log('Final chatInput:', chatInput);\nconsole.log('Message source:', messageSource);\nconsole.log('Phone number:', phoneNumber);\nconsole.log('Detected language:', detectedLanguage);\nconsole.log('Has text:', !!chatInput);\n\n// Return standardized format with language information\nreturn {\n  json: {\n    chatInput: chatInput,\n    contact: contact,\n    phone: phoneNumber,\n    messageType: messageSource,\n    detectedLanguage: detectedLanguage,\n    isMediaMessage: messageSource === 'audio_transcribed',\n    sessionId: `conv_${Date.now()}_${contact.id}`,\n    timestamp: new Date().toISOString(),\n    \n    // Language context for the AI to maintain consistency\n    languageContext: {\n      inputLanguage: detectedLanguage,\n      shouldReplyInSameLanguage: true,\n      isAudioTranscription: messageSource === 'audio_transcribed'\n    },\n    \n    // Debug information\n    debug: {\n      source: messageSource,\n      hasText: !!chatInput,\n      hasPhone: !!phoneNumber,\n      detectedLanguage: detectedLanguage,\n      inputKeys: Object.keys(inputData),\n      processingComplete: true\n    }\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1936,
        -384
      ],
      "id": "a6c00f94-7b40-44fa-9502-073db451020e",
      "name": "Format Output"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1664,
        -608
      ],
      "id": "0774711d-24a4-479d-9c62-99667fa2d35f",
      "name": "Transcribe a recording",
      "credentials": {
        "openAiApi": {
          "id": "5HLXljL3CNZANdI4",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        3424,
        -128
      ],
      "id": "f062e655-ba97-4520-a6d2-fa5ece2fd90c",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "5HLXljL3CNZANdI4",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Simplified Conversation Summarizer - Include current message in history\nconst allItems = $input.all();\n\n// Get current message and phone from Message Processor\nlet userPhone = '';\nlet currentMessage = '';\ntry {\n  const currentMessageData = $('Message Processor').first().json;\n  userPhone = currentMessageData.phone || currentMessageData.primaryId || '';\n  currentMessage = currentMessageData.userMessage || '';\n} catch (e) {\n  userPhone = '';\n  currentMessage = '';\n}\n\n// Extract all past conversation data\nlet conversationHistoryArray = [];\nallItems.forEach((item) => {\n  const data = item.json;\n  if (data.conversation_content && data.created_at) {\n    conversationHistoryArray.push(data);\n  }\n});\n\n// Sort past conversations by timestamp (oldest first)\nconst sortedPastConversations = conversationHistoryArray\n  .sort((a, b) => new Date(a.created_at) - new Date(b.created_at))\n  .map((item, index) => ({\n    text: item.conversation_content,\n    timestamp: item.created_at,\n    order: index + 1\n  }));\n\n// Add current message as the latest conversation\nconst allConversations = [...sortedPastConversations];\nif (currentMessage) {\n  allConversations.push({\n    text: `user: ${currentMessage}`,\n    timestamp: new Date().toISOString(),\n    order: sortedPastConversations.length + 1\n  });\n}\n\n// Return clean output with current message included\nreturn {\n  json: {\n    phone: userPhone,\n    conversationHistory: allConversations,\n    totalConversations: allConversations.length,\n    currentMessage: currentMessage\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2944,
        -384
      ],
      "id": "3852b6ab-b901-488f-a60b-e543ff71c191",
      "name": "Conversation Summarizer"
    },
    {
      "parameters": {
        "jsCode": "// Simple Response Message Extractor\nconst responseData = $('AI Agent').first().json;\n\n// Extract just the AI response content\nconst message = responseData.output || responseData.text || responseData.response || '';\n\n// Return simple format for chat interface\nreturn {\n    json: {\n        output: message\n    }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4112,
        -384
      ],
      "id": "f4127eb5-a789-473d-a5b1-65da56bc096a",
      "name": "Final Response"
    },
    {
      "parameters": {
        "url": "https://xatrtqdgghanwdujyhkq.supabase.co/functions/v1/avatar-conversations",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "avatar_id",
              "value": "9a567d58-cb5b-497d-869a-d6a8d61a8b4e"
            },
            {
              "name": "phone_number",
              "value": "+60123456789"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhhdHJ0cWRnZ2hhbndkdWp5aGtxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg5NjE1MzEsImV4cCI6MjA3NDUzNzUzMX0.sniz2dGyadAa3BvZJ2Omi6thtVWuqMjTFFdM1H_zWAA"
            },
            {
              "name": "x-api-key",
              "value": "pk_live_58b623706a553414cf54529e0f09415a2195299094e6dde3885013a8ed0e3ceb"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2656,
        -384
      ],
      "id": "305e8053-a8eb-4056-b398-cb6b303d2198",
      "name": "Get Conversation Memory"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://xatrtqdgghanwdujyhkq.supabase.co/functions/v1/avatar-conversations",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhhdHJ0cWRnZ2hhbndkdWp5aGtxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg5NjE1MzEsImV4cCI6MjA3NDUzNzUzMX0.sniz2dGyadAa3BvZJ2Omi6thtVWuqMjTFFdM1H_zWAA"
            },
            {
              "name": "x-api-key",
              "value": "pk_live_58b623706a553414cf54529e0f09415a2195299094e6dde3885013a8ed0e3ceb"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "avatar_id",
              "value": "9a567d58-cb5b-497d-869a-d6a8d61a8b4e"
            },
            {
              "name": "phone_number",
              "value": "+60123456789"
            },
            {
              "name": "conversation_content",
              "value": "user: hey | assistant: hello || user: how are you | assistant: great!"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3856,
        -384
      ],
      "id": "e5ed47b9-c6db-410a-8eff-ae821b2d2365",
      "name": "Store Conversation"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Conversation Summarizer').item.json.currentMessage }}",
        "options": {
          "systemMessage": "={{ $json.active_prompt.system_prompt }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        3488,
        -384
      ],
      "id": "743d0441-6e10-4a10-97ce-19ee0580476d",
      "name": "AI Agent"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_config": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Processor": {
      "main": [
        [
          {
            "node": "Get Conversation Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Audio": {
      "main": [
        [
          {
            "node": "Transcribe a recording",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Get Audio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Output": {
      "main": [
        [
          {
            "node": "Message Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe a recording": {
      "main": [
        [
          {
            "node": "Format Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Summarizer": {
      "main": [
        [
          {
            "node": "get_config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Conversation Memory": {
      "main": [
        [
          {
            "node": "Conversation Summarizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Conversation": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Store Conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ad80ce43-99b6-476e-87b1-90430e0d995c",
  "meta": {
    "instanceId": "2634913f2f63564c82ce4655d9f40e1dc9c1a1fed88b38602578fc73f31e2a9f"
  },
  "id": "SChJCXGEIZDLgVox",
  "tags": []
}